/* groovylint-disable CompileStatic, DuplicateNumberLiteral, DuplicateStringLiteral, LineLength */
// https://github.com/janinko/ghprb/issues/77
def scmDefinition(args){
    return {
        cpsScm {
            scm {
                git {
                    if (args.branch) {
                        branch("*/${args.branch}")
                    }
                    remote {
                        if (args.useGithub) {
                            github(args.repoName)
                        }
                        else {
                            url(args.repo)
                            credentials(args.get('credentials', "nebula-dex-github-ssh"))
                            if (args.branch) {
                                refspec("+refs/heads/${args.branch}:refs/remotes/origin/${args.branch}")
                            }
                        }
                    }
                    if (args.check) {
                        extensions {
                            // gitSCMChecksExtension {
                            //     // If this option is checked, verbose log will be output to build console; the verbose log is useful for debugging the publisher creation.
                            //     verboseConsoleLog(true)
                            // }
                            // gitSCMStatusChecksExtension {
                            //     name(args.check)
                            //     unstableBuildNeutral(true)
                            // }
                        }
                    }
                }
            }
            scriptPath(args.get('jenkinsfile', 'Jenkinsfile'))
        }
    }
}

def header(def text, def num=4) {
    return "<h${num}>${text}</h${num}>"
}

def ul(def ulMap) {
    if (ulMap instanceof Map) {
        ulMap = ulMap.collect { "${it.key} - ${it.value}" }
    }
    def entries = ulMap.collect { "<li>${it}</li>" }.join("\n")
    return "<ul>${entries}</ul>"
}


def standardDescription() {
    def url = "https://github.com/nebula-dex/jenkins-libraries/tree/main/dsl"
    return header("""
        This job was automatically generated by DSL script located at <a href="${url}">this repository</a> and processed by <a href='${binding.variables.get('JOB_URL')}'>this job</a>, any manual configuration will be overriden.
    """, 5)
}

def createCommonPipeline(args){
    args.repoName = "Nebula-DEX/${args.repo}"
    args.repo = "git@github.com:Nebula-DEX/${args.repo}.git"

    def des = args.get('description', '')
    des += "${des ? '<br/>' : ''} ${standardDescription()}"

    return pipelineJob(args.name.replaceAll(' ', '-')) {
        displayName(args.name.split('/')[-1])
        disabled(args.get('disabled', false))

        description(des)

        logRotator {
            daysToKeep(args.daysToKeep ?: 45)
            numToKeep(args.numToKeep ?: 1000)
            artifactDaysToKeep(args.daysToKeep ?: 45)
            artifactNumToKeep(args.numToKeep ?: 1000)
        }

        if (args.parameters) {
            parameters args.parameters
        }

        environmentVariables {
            keepBuildVariables(true)
            keepSystemVariables(true)
            args.env.each { key, value ->
                env(key.toUpperCase(), value)
            }
            env("GOROOT", "/usr/local/go")
            env("GOPATH", "/home/jenkins-agent/GOPATH")
            env("GOCACHE", "/home/jenkins-agent/GOCACHE")
            env("GO111MODULE", "on")
            env("GOBIN", "/home/jenkins-agent/GOPATH/bin")
            env("PATH+EXTRA", "/home/jenkins-agent/GOPATH/bin:/usr/local/go/bin:/home/jenkins-agent/.local/bin:/jenkins/ubuntu/.pyenv/bin:/jenkins/ubuntu/.pyenv/shims")
        }

        if (args.get('useScmDefinition', true)) {
            definition scmDefinition(args)
        }
        else {
            definition args.definition
        }

        properties {
            if (args.copyArtifacts) {
                copyArtifactPermission {
                    projectNames('*')
                }
            }
            if (args.disableConcurrentBuilds) {
                disableConcurrentBuilds {
                    abortPrevious(args.abortPrevious ?: false)
                }
            }

            githubProjectUrl('https://github.com/' + args.repoName)

            pipelineTriggers {
                triggers {
                    if (args.get('useScmDefinition', true)) {
                        githubPush()
                    }
                    if (args.cron) {
                        cron {
                            spec(args.cron)
                        }
                    }
                    if (args.parameterizedCron) {
                        parameterizedCron {
                            parameterizedSpecification(args.parameterizedCron)
                        }
                    }
                }
            }
        }
    }
}

def libDefinition(methodName) {
    return {
        cps {
            script('''
            library (
                identifier: "jenkins-libraries@${env.JENKINS_LIB_BRANCH}",
                changelog: false,
            )

            ''' + methodName)
        }
    }
}

def snapshotParams(args=[:]) {
    return {
        stringParam {
            name('CONFIG_PATH')
            defaultValue(args.get('CONFIG_PATH',''))
            description('Path to the config file')
            trim(true)
        }
        stringParam {
            name('TIMEOUT')
            defaultValue(args.get('TIMEOUT','17'))
            description('Number of minutes after which the node will stop')
            trim(true)
        }
        stringParam {
            name('JENKINS_LIB_BRANCH')
            defaultValue(args.get('JENKINS_LIB_BRANCH', 'main'))
            description('Branch of jenkins-shared-library from which pipeline should be run')
            trim(true)
        }
        stringParam {
            name('NODE_LABEL')
            defaultValue(args.get('NODE_LABEL','snapshot-testing'))
            description('Jenkins label for running pipeline (empty means any node)')
            trim(true)
        }
        stringParam {
            name('SNAPSHOT_TESTING_BRANCH')
            defaultValue(args.get('SNAPSHOT_TESTING_BRANCH', 'main'))
            description('Branch for the devopstools')
            trim(true)
        }
    }
}

def jobs = [
    // DSL Job - the one that manages this file
    [
        name: 'private/infra/DSL Job',
        numToKeep: 50,
        repo: 'jenkins-libraries',
        description: header('this job is used to generate other jobs'),
        jenkinsfile: 'dsl/Jenkinsfile',
        branch: 'main',
        disableConcurrentBuilds: true,
        check: 'DSL Job',
    ],
    // Jenkins Configuration As Code
    [
        name: 'private/infra/Jenkins Configuration as Code Pipeline',
        numToKeep: 50,
        check: 'Jenkins Configuration as Code pipeline',
        repo: 'jenkins-libraries',
        description: header('This job is used to auto apply changes to jenkins instance configuration'),
        jenkinsfile: 'configuration/Jenkinsfile',
        branch: 'main',
        disableConcurrentBuilds: true,
    ],
    [
        name: 'private/snapshots/Mainnet',
        // disabled: true,
        numToKeep: 500,
        useScmDefinition: false,
        env: [
            NET_NAME: 'nebula1',
        ],
        parameters: snapshotParams(
            NODE_LABEL: 'snapshot-testing',
            CONFIG_PATH: 'https://raw.githubusercontent.com/Nebula-DEX/networks/refs/heads/main/nebula1/snapshot-testing.toml',
        ),
        daysToKeep: 4,
        definition: libDefinition('pipelineSnapshotTesting()'),
        cron: "H/20 * * * *",
        disableConcurrentBuilds: true,
    ],
]

// MAIN
jobs.each { job ->
    createCommonPipeline(job)
}